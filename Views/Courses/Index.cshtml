@model PaginatedList<CourseManagement.ViewModels.CourseViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index">
    <div class="d-flex">
        <input placeholder="Search ...." name="searchString" value='@ViewData["CurrentFilter"]'
        autocomplete="off"/>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder ='@ViewData["TitleSortParam"]'
                asp-route-currentFilter ='@ViewData["CurrentFilter"]'>
                    @Html.DisplayNameFor(model => model[0].Title)
                </a>
                
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder ='@ViewData["TopicSortParam"]'
                asp-route-currentFilter ='@ViewData["CurrentFilter"]'>
                    @Html.DisplayNameFor(model => model[0].Topic)
                </a>
                
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder ='@ViewData["ReleaseDateSortParam"]'
                asp-route-currentFilter ='@ViewData["CurrentFilter"]'>
                     @Html.DisplayNameFor(model => model[0].ReleaseDate)
                </a>
               
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Author)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Topic)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var hasNext = !Model.HasNextPage?"disabled":"";
    var hasPrevious = !Model.HasPreviousPage?"disabled":"";
}
<a asp-action="Index" asp-route-sortOrder ='@ViewData["CurrentSort"]'
    asp-route-currentFilter ='@ViewData["CurrentFilter"]'
    asp-route-pageIndex ='@(Model.PageIndex - 1)'
    class = "btn btn-default @hasPrevious" >
        PREVIOUS
</a>
<a asp-action="Index" asp-route-sortOrder ='@ViewData["CurrentSort"]'
    asp-route-currentFilter ='@ViewData["CurrentFilter"]'
    asp-route-pageIndex ='@(Model.PageIndex + 1)'
    class = "btn btn-default @hasNext"  >
        NEXT
</a>

               